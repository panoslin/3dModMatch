version: '3.8'

services:
  # PostgreSQL数据库
  db:
    image: postgres:13
    container_name: shoe_matcher_db_prod
    environment:
      POSTGRES_DB: shoe_matcher
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - shoe_matcher_network

  # Redis缓存和消息队列
  redis:
    image: redis:7-alpine
    container_name: shoe_matcher_redis_prod
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - shoe_matcher_network

  # Hybrid匹配服务容器
  matcher:
    build:
      context: ../hybrid
      dockerfile: Dockerfile
    container_name: shoe_matcher_hybrid_prod
    volumes:
      - ./results:/app/output
      - ./shoe_matcher_web/media:/app/input:ro
      - ./shoe_matcher_web/logs:/app/logs
    environment:
      - LD_LIBRARY_PATH=/usr/local/lib
      - LD_PRELOAD=/usr/local/lib/libOpen3D.so
      - PYTHONPATH=/app/python
      - OMP_NUM_THREADS=4
    healthcheck:
      test: ["CMD", "python3", "-c", "import cppcore; print('OK')"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    networks:
      - shoe_matcher_network
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '8'
          memory: 8G
        reservations:
          cpus: '4'
          memory: 4G

  # Django Web应用
  web:
    build: .
    container_name: shoe_matcher_web_prod
    ports:
      - "${WEB_PORT:-8000}:8000"
    volumes:
      - ./shoe_matcher_web/media:/app/media
      - ./shoe_matcher_web/static:/app/static
      - ./shoe_matcher_web/logs:/app/logs
      - ./results:/app/results
      # 测试数据挂载
      - ../candidates:/app/test_data/candidates:ro
      - ../models:/app/test_data/models:ro
      # Docker socket用于调用匹配容器
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-change-this-in-production}
      - DJANGO_ENVIRONMENT=docker
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      # 数据库配置
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=shoe_matcher
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-postgres123}
      - DB_HOST=db
      - DB_PORT=5432
      # Redis配置
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      # 匹配服务配置
      - MATCHER_DOCKER_IMAGE=hybrid-shoe-matcher:latest
      - DEFAULT_CLEARANCE=2.0
      - MAX_CONCURRENT_TASKS=3
      # 文件上传配置
      - MAX_UPLOAD_SIZE=104857600
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      matcher:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - shoe_matcher_network
    # 需要访问Docker守护进程
    user: root

  # Celery异步任务处理
  celery:
    build: .
    container_name: shoe_matcher_celery_prod
    command: celery -A config worker -l info --concurrency=4 --max-tasks-per-child=100
    volumes:
      - ./shoe_matcher_web/media:/app/media
      - ./shoe_matcher_web/logs:/app/logs
      - ./results:/app/results
      # 测试数据挂载
      - ../candidates:/app/test_data/candidates:ro
      - ../models:/app/test_data/models:ro
      # Docker socket用于调用匹配容器
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-change-this-in-production}
      - DJANGO_ENVIRONMENT=docker
      # 数据库配置
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=shoe_matcher
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-postgres123}
      - DB_HOST=db
      - DB_PORT=5432
      # Redis配置
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      # 匹配服务配置
      - MATCHER_DOCKER_IMAGE=hybrid-shoe-matcher:latest
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      matcher:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - shoe_matcher_network
    # 需要访问Docker守护进程
    user: root
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G

  # Celery Beat定时任务
  celery-beat:
    build: .
    container_name: shoe_matcher_beat_prod
    command: celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./shoe_matcher_web/logs:/app/logs
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-change-this-in-production}
      - DJANGO_ENVIRONMENT=docker
      # 数据库配置
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=shoe_matcher
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-postgres123}
      - DB_HOST=db
      - DB_PORT=5432
      # Redis配置
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - shoe_matcher_network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: shoe_matcher_nginx_prod
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./shoe_matcher_web/static:/var/www/static:ro
      - ./shoe_matcher_web/media:/var/www/media:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - shoe_matcher_network

  # 系统初始化服务
  init:
    build: .
    container_name: shoe_matcher_init_prod
    command: >
      bash -c "
        echo '=== 等待数据库启动 ===' &&
        python manage.py wait_for_db &&
        echo '=== 运行数据库迁移 ===' &&
        python manage.py migrate &&
        echo '=== 收集静态文件 ===' &&
        python manage.py collectstatic --noinput &&
        echo '=== 初始化用户和数据 ===' &&
        python init_docker.py &&
        echo '=== 初始化测试数据 ===' &&
        python manage.py init_test_data &&
        echo '=== 系统初始化完成 ==='
      "
    volumes:
      - ./shoe_matcher_web/media:/app/media
      - ./shoe_matcher_web/static:/app/static
      - ./shoe_matcher_web/logs:/app/logs
      # 测试数据挂载
      - ../candidates:/app/test_data/candidates:ro
      - ../models:/app/test_data/models:ro
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-change-this-in-production}
      - DJANGO_ENVIRONMENT=docker
      # 数据库配置
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=shoe_matcher
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-postgres123}
      - DB_HOST=db
      - DB_PORT=5432
      # Redis配置
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - shoe_matcher_network
    restart: "no"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  shoe_matcher_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16